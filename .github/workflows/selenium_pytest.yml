name: Selenium Pytest CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_data
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 3306
      DATABASE_USER: root
      DATABASE_PASSWORD: root
      DATABASE_NAME: test_data

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip curl jq fonts-liberation libatk-bridge2.0-0 libatk1.0-0 \
            libcairo2 libcups2 libdrm2 libgbm1 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 \
            libu2f-udev libx11-xcb1 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 xdg-utils

      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-chromedriver: true

      - name: Verify Chrome and ChromeDriver installation
        run: |
          google-chrome --version
          chromedriver --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Initialize database
        run: |
          if [ ! -f init.sql ]; then 
            echo "init.sql not found! Creating a dummy one for demo."
            echo "CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, name VARCHAR(255));" > init.sql
          fi
          mysql -h 127.0.0.1 -uroot -proot test_data < init.sql

      - name: Kill existing Chrome processes
        run: |
          pkill -f chromedriver || true
          pkill -f chrome || true
          sleep 2

      - name: Create required directories
        run: |
          mkdir -p logs
          mkdir -p allure-results
          mkdir -p reports

      - name: Run Pytest with Allure
        run: |
          pytest --maxfail=1 -vv -s --tb=short --alluredir=allure-results --headless
        continue-on-error: false
        timeout-minutes: 15

      - name: Install Allure CLI
        if: always()
        run: |
          wget -O allure-commandline.tgz https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxf allure-commandline.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - name: Generate Allure Report
        if: always()
        run: |
          allure generate allure-results -o allure-report --clean

      - name: Setup Pages
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./allure-report

      - name: Deploy to GitHub Pages
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload Allure Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: allure-report
          retention-days: 7

      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.run_number }}
          path: logs
          retention-days: 3

      - name: Cleanup
        if: always()
        run: |
          pkill -f chromedriver || true
          pkill -f chrome || true