name: Selenium Pytest CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_data
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 3306
      DATABASE_USER: root
      DATABASE_PASSWORD: root
      DATABASE_NAME: test_data
      DISPLAY: ":99"
      TMPDIR: /tmp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip curl jq fonts-liberation libatk-bridge2.0-0 libatk1.0-0 \
            libcairo2 libcups2 libdrm2 libgbm1 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 \
            libu2f-udev libx11-xcb1 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 xdg-utils \
            xvfb psmisc

      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-chromedriver: true

      - name: Verify Chrome and ChromeDriver installation
        run: |
          google-chrome --version
          chromedriver --version
          which chromedriver

      - name: Alternative Chrome Setup (fallback)
        if: failure()
        run: |
          echo "=== Fallback Chrome Setup ==="
          # Remove any problematic installations
          sudo apt-get remove -y google-chrome-stable || true
          sudo rm -f /usr/local/bin/chromedriver || true
          
          # Install Chrome manually
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Let Selenium auto-download ChromeDriver
          python -c "
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          options = Options()
          options.add_argument('--headless')
          options.add_argument('--no-sandbox')
          options.add_argument('--disable-dev-shm-usage')
          print('Testing Chrome with selenium-manager...')
          driver = webdriver.Chrome(options=options)
          print('Chrome version:', driver.capabilities['browserVersion'])
          print('ChromeDriver setup successful via selenium-manager')
          driver.quit()
          "
          
          google-chrome --version
          echo "Selenium will auto-manage ChromeDriver"

      - name: Start virtual display
        run: |
          sudo Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Initialize database
        run: |
          if [ ! -f init.sql ]; then 
            echo "init.sql not found! Creating a dummy one for demo."
            echo "CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, name VARCHAR(255));" > init.sql
          fi
          mysql -h 127.0.0.1 -uroot -proot test_data < init.sql

      - name: Comprehensive Chrome cleanup
        run: |
          echo "=== Comprehensive Chrome Cleanup ==="
          
          # Kill all Chrome and ChromeDriver processes
          sudo pkill -f chrome || true
          sudo pkill -f chromedriver || true
          sudo killall -9 chrome || true
          sudo killall -9 chromedriver || true
          
          # Clean up Chrome user data directories
          sudo rm -rf /tmp/chrome_user_data_* || true
          sudo rm -rf /tmp/.org.chromium.* || true
          sudo rm -rf /tmp/scoped_dir* || true
          sudo rm -rf /home/runner/tmp/chrome_user_data_* || true
          sudo rm -rf ~/.config/google-chrome* || true
          sudo rm -rf ~/.cache/google-chrome* || true
          
          # Clean up any Chrome lock files
          sudo rm -rf /tmp/.X*-lock || true
          sudo rm -rf /tmp/.X11-unix/X* || true
          
          # Clean up shared memory
          sudo rm -rf /dev/shm/* || true
          
          # Show what processes are still running
          ps aux | grep -E "(chrome|chromedriver)" | grep -v grep || echo "No Chrome processes found"
          
          # Give everything time to clean up
          sleep 3
          
          echo "=== Cleanup Complete ==="

      - name: Set proper permissions for temp directories
        run: |
          sudo chmod 1777 /tmp
          mkdir -p /tmp/chrome_temp
          chmod 755 /tmp/chrome_temp

      - name: Create required directories
        run: |
          mkdir -p logs
          mkdir -p allure-results
          mkdir -p reports
          mkdir -p downloads

      - name: Pre-test environment check
        run: |
          echo "=== Environment Check ==="
          echo "TMPDIR: $TMPDIR"
          echo "USER: $USER"
          echo "HOME: $HOME"
          echo "CI: $CI"
          echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
          echo "Available temp space:"
          df -h /tmp
          echo "Chrome version:"
          google-chrome --version || echo "Chrome not found"
          echo "ChromeDriver version:"
          chromedriver --version || echo "ChromeDriver not found"
          echo "Chrome processes before test:"
          ps aux | grep -E "(chrome|chromedriver)" | grep -v grep || echo "No Chrome processes found"

      - name: Run Pytest with Allure
        run: |
          # Set additional environment variables for Chrome
          export CHROME_NO_SANDBOX=1
          export CHROME_DISABLE_GPU=1
          export CHROME_HEADLESS=1
          
          # Run the tests
          pytest -vv -s --tb=short --alluredir=allure-results --headless
        continue-on-error: false
        timeout-minutes: 15

      - name: Post-test cleanup
        if: always()
        run: |
          echo "=== Post-test Cleanup ==="
          sudo pkill -f chrome || true
          sudo pkill -f chromedriver || true
          sudo rm -rf /tmp/chrome_user_data_* || true
          sudo rm -rf /tmp/.org.chromium.* || true
          sudo rm -rf /tmp/scoped_dir* || true

      - name: Install Allure CLI
        if: always()
        run: |
          wget -O allure-commandline.tgz https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxf allure-commandline.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - name: Generate Allure Report
        if: always()
        run: |
          allure generate allure-results -o allure-report --clean

      - name: Setup Pages
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./allure-report

      - name: Deploy to GitHub Pages
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload Allure Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: allure-report
          retention-days: 7

      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.run_number }}
          path: logs
          retention-days: 3

      - name: Final cleanup
        if: always()
        run: |
          sudo pkill -f chrome || true
          sudo pkill -f chromedriver || true
          sudo rm -rf /tmp/chrome_user_data_* || true