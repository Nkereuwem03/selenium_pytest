name: Selenium Pytest CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_data
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 3306
      DATABASE_USER: root
      DATABASE_PASSWORD: root
      DATABASE_NAME: test_data

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip fonts-liberation libatk-bridge2.0-0 libatk1.0-0 \
            libcairo2 libcups2 libdrm2 libgbm1 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 \
            libu2f-udev libx11-xcb1 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 xdg-utils

      - name: Install Google Chrome
        run: |
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y
          rm google-chrome-stable_current_amd64.deb
          google-chrome --version || { echo "Failed to run google-chrome --version"; exit 1; }

      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+' || echo "")
          if [ -z "$CHROME_VERSION" ]; then
            echo "Could not determine Chrome version, falling back to latest ChromeDriver"
            CHROMEDRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE || echo "")
          else
            CHROMEDRIVER_VERSION=$(curl -sS "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}" || echo "")
            if [ -z "$CHROMEDRIVER_VERSION" ]; then
              echo "No ChromeDriver version found for Chrome $CHROME_VERSION, falling back to latest"
              CHROMEDRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE || echo "")
            fi
          fi
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "Failed to determine ChromeDriver version, using default version 128.0.6613.84"
            CHROMEDRIVER_VERSION="128.0.6613.84"
          fi
          echo "Installing ChromeDriver version: $CHROMEDRIVER_VERSION"
          wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip" || { echo "Failed to download ChromeDriver"; exit 1; }
          unzip chromedriver_linux64.zip || { echo "Failed to unzip ChromeDriver"; exit 1; }
          sudo mv chromedriver /usr/local/bin/ || { echo "Failed to move ChromeDriver"; exit 1; }
          sudo chmod +x /usr/local/bin/chromedriver || { echo "Failed to set ChromeDriver permissions"; exit 1; }
          chromedriver --version || { echo "Failed to verify ChromeDriver version"; exit 1; }

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Initialize database
        run: |
          if [ ! -f init.sql ]; then 
            echo "init.sql not found! Creating a dummy one for demo."
            echo "CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, name VARCHAR(255));" > init.sql
          fi
          mysql -h 127.0.0.1 -uroot -proot test_data < init.sql

      - name: Kill existing Chrome processes
        run: |
          pkill -f chromedriver || true
          pkill -f chrome || true

      - name: Run Pytest with Allure
        run: |
          pytest --maxfail=1 -vv -s --tb=short --alluredir=allure-results --headless
        continue-on-error: false

      - name: Install Allure CLI
        if: always()
        run: |
          wget -O allure-commandline.tgz https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxf allure-commandline.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - name: Generate Allure Report
        if: always()
        run: |
          allure generate allure-results -o allure-report --clean

      - name: Deploy to GitHub Pages
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      - name: Upload Allure Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ github.run_number }}
          path: allure-report
          retention-days: 7

      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.run_number }}
          path: logs
          retention-days: 3
